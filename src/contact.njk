---
layout: base.njk
title: Contact Us | QUARX
description: Get in touch with QUARX to explore how our AI-powered solutions can transform your pharmaceutical market access and commercial strategy.
permalink: /contact/
---

<main class="bg-white min-h-screen flex flex-col pt-32 pb-16">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-16 lg:items-start">
      <!-- Left Side - Value Proposition -->
      <div class="flex flex-col">
        <h1 class="text-3xl lg:text-4xl font-light text-[#0B3041] mb-8 leading-tight">
          We are in the sweetspot...
          <br />
          and now so are you.
        </h1>

        <!-- Venn Diagram -->
        <div class="relative w-full max-w-md mx-auto lg:mx-0 my-12">
          <img
            src="/assets/venn-diagram.png"
            alt="QUARX Sweet Spot - Market Access & Commercial Strategy, Life Sciences Data & Analytical Expertise, Intentional Infusion of AI & Technology"
            class="w-full h-auto"
          />
        </div>
      </div>

      <!-- Right Side - Contact Form -->
      <div class="bg-white rounded-lg shadow-lg px-8 pb-8 pt-0 lg:px-12 lg:pb-12 lg:pt-0">
        <h2 class="text-3xl lg:text-4xl font-light text-[#0B3041] mb-8 leading-tight">
          Let's connect and explore possibilities!
        </h2>

        <form novalidate hx-boost="false" x-data="{
          name: '',
          email: '',
          phone: '',
          company: '',
          message: '',
          errors: {},
          isSubmitting: false,
          showToast: false,
          toastMessage: '',
          toastType: 'success',
          useMockMode: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1', // Enable mock in dev
          init() {
            console.log('🚀 Contact form Alpine.js initialized');
            console.log('📍 Hostname:', window.location.hostname);
            console.log('🧪 Mock mode:', this.useMockMode);
          },
          displayToast(message, type = 'success') {
            console.log('displayToast called:', message, type);
            window.dispatchEvent(new CustomEvent('toast', {
              detail: { message, type }
            }));
          },
          validate() {
            this.errors = {};

            // Name validation
            if (!this.name.trim()) {
              this.errors.name = 'Name is required';
            } else if (this.name.trim().length > 100) {
              this.errors.name = 'Name must be less than 100 characters';
            }

            // Email validation
            if (!this.email.trim()) {
              this.errors.email = 'Email is required';
            } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.email.trim())) {
              this.errors.email = 'Invalid email address';
            } else if (this.email.trim().length > 255) {
              this.errors.email = 'Email must be less than 255 characters';
            }

            // Phone validation (optional)
            if (this.phone.trim() && this.phone.trim().length > 20) {
              this.errors.phone = 'Phone must be less than 20 characters';
            }

            // Company validation (optional)
            if (this.company.trim() && this.company.trim().length > 100) {
              this.errors.company = 'Company must be less than 100 characters';
            }

            // Message validation
            if (!this.message.trim()) {
              this.errors.message = 'Message is required';
            } else if (this.message.trim().length > 1000) {
              this.errors.message = 'Message must be less than 1000 characters';
            }

            return Object.keys(this.errors).length === 0;
          },
          async submitForm() {
            console.log('🎯 submitForm called');

            if (!this.validate()) {
              console.log('❌ Validation failed:', this.errors);
              return;
            }

            console.log('✅ Validation passed');
            this.isSubmitting = true;

            try {
              let data;

              if (this.useMockMode) {
                // Development mode - simulate submission to avoid rate limits
                console.log('🧪 MOCK MODE - Form data that would be sent:', {
                  name: this.name.trim(),
                  email: this.email.trim(),
                  phone: this.phone.trim(),
                  company: this.company.trim(),
                  message: this.message.trim()
                });

                await new Promise(resolve => setTimeout(resolve, 1000));

                // Simulate success
                data = { success: true };
                console.log('✅ Mock response:', data);
              } else {
                // Production mode - real submission to Web3Forms
                const formData = new FormData();
                formData.append('access_key', '9c10c873-4393-4dab-a78f-687963700d44');
                formData.append('name', this.name.trim());
                formData.append('email', this.email.trim());
                formData.append('message', this.message.trim());
                formData.append('subject', 'New Contact Form Submission from QUARX Website');

                if (this.phone.trim()) {
                  formData.append('phone', this.phone.trim());
                }
                if (this.company.trim()) {
                  formData.append('company', this.company.trim());
                }

                console.log('📤 Submitting to Web3Forms via FormData');

                const response = await fetch('https://api.web3forms.com/submit', {
                  method: 'POST',
                  body: formData
                });

                data = await response.json();
                console.log('📧 Web3Forms response:', data);
              }

              if (data.success) {
                // Show success toast
                this.displayToast('Thank you for reaching out! We\'ll get back to you as soon as possible.', 'success');

                // Reset form
                this.name = '';
                this.email = '';
                this.phone = '';
                this.company = '';
                this.message = '';
                this.errors = {};
              } else {
                throw new Error(data.message || 'Submission failed');
              }
            } catch (error) {
              console.error('Form submission error:', error);
              console.error('Error details:', error.message);

              // Show more specific error message
              let errorMessage = 'Failed to send message. ';
              if (error.message.includes('CORS') || error.message.includes('fetch')) {
                errorMessage += 'Network issue detected. The form will work when deployed to production.';
              } else {
                errorMessage += 'Please try again or email us directly.';
              }

              this.displayToast(errorMessage, 'error');
            } finally {
              this.isSubmitting = false;
            }
          }
        }"
        @submit.prevent="submitForm()"
        class="space-y-6">

          <!-- Name Field -->
          <div>
            <label for="name" class="block text-[#0B3041] text-lg font-light mb-2">
              Name
            </label>
            <input
              id="name"
              type="text"
              x-model="name"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-[#5A9BA6] focus:ring-2 focus:ring-[#5A9BA6] focus:outline-none transition-colors"
            />
            <p x-show="errors.name" x-text="errors.name" x-cloak class="text-red-500 text-sm mt-1"></p>
          </div>

          <!-- Email Field -->
          <div>
            <label for="email" class="block text-[#0B3041] text-lg font-light mb-2">
              Email
            </label>
            <input
              id="email"
              type="email"
              x-model="email"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-[#5A9BA6] focus:ring-2 focus:ring-[#5A9BA6] focus:outline-none transition-colors"
            />
            <p x-show="errors.email" x-text="errors.email" x-cloak class="text-red-500 text-sm mt-1"></p>
          </div>

          <!-- Phone Field -->
          <div>
            <label for="phone" class="block text-[#0B3041] text-lg font-light mb-2">
              Phone
            </label>
            <input
              id="phone"
              type="tel"
              x-model="phone"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-[#5A9BA6] focus:ring-2 focus:ring-[#5A9BA6] focus:outline-none transition-colors"
            />
            <p x-show="errors.phone" x-text="errors.phone" x-cloak class="text-red-500 text-sm mt-1"></p>
          </div>

          <!-- Company Field -->
          <div>
            <label for="company" class="block text-[#0B3041] text-lg font-light mb-2">
              Company
            </label>
            <input
              id="company"
              type="text"
              x-model="company"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-[#5A9BA6] focus:ring-2 focus:ring-[#5A9BA6] focus:outline-none transition-colors"
            />
            <p x-show="errors.company" x-text="errors.company" x-cloak class="text-red-500 text-sm mt-1"></p>
          </div>

          <!-- Message Field -->
          <div>
            <label for="message" class="block text-[#0B3041] text-lg font-light mb-2">
              How can we help you?
            </label>
            <textarea
              id="message"
              x-model="message"
              rows="5"
              required
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:border-[#5A9BA6] focus:ring-2 focus:ring-[#5A9BA6] focus:outline-none transition-colors resize-none"
            ></textarea>
            <p x-show="errors.message" x-text="errors.message" x-cloak class="text-red-500 text-sm mt-1"></p>
          </div>

          <!-- Submit Button -->
          <button
            type="submit"
            :disabled="isSubmitting"
            class="w-full bg-[#0B3041] hover:bg-[#156082] text-white text-lg py-6 rounded-md transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            x-text="isSubmitting ? 'SENDING...' : 'SUBMIT'"
          >
          </button>
        </form>

        <!-- Toast Notification - Outside form for better positioning -->
        <div
          x-data="{ showToast: false, toastMessage: '', toastType: 'success' }"
          @toast.window="showToast = true; toastMessage = $event.detail.message; toastType = $event.detail.type; setTimeout(() => showToast = false, 5000)"
          style="position: fixed; bottom: 2rem; right: 2rem; z-index: 9999; max-width: 28rem;"
        >
          <div
            x-show="showToast"
            x-transition:enter="transition ease-out duration-300"
            x-transition:enter-start="opacity-0 transform translate-y-2"
            x-transition:enter-end="opacity-100 transform translate-y-0"
            x-transition:leave="transition ease-in duration-500"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
            :class="toastType === 'success' ? 'bg-green-50 border-green-500 text-green-800' : 'bg-red-50 border-red-500 text-red-800'"
            class="px-6 py-4 rounded-lg shadow-lg border-l-4"
          >
            <div class="flex items-start gap-3">
              <!-- Icon -->
              <svg
                x-show="toastType === 'success'"
                class="w-6 h-6 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              <svg
                x-show="toastType === 'error'"
                class="w-6 h-6 flex-shrink-0"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
              <!-- Message -->
              <p x-text="toastMessage" class="text-base font-medium flex-1"></p>
              <!-- Close Button -->
              <button
                @click="showToast = false"
                type="button"
                class="text-current hover:opacity-70 transition-opacity"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</main>
